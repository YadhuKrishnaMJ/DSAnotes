Prim's Algorithm:

    Approach:
        Initialization: 
            Start with empty bst and set of visited nodes
            choose arbitary node
            select smallest edge
            update
            repeat

Code:

import java.util.*;

// Class to represent an Edge in the graph
class Edge implements Comparable<Edge> {
    int src, dest, weight;

    public Edge(int src, int dest, int weight) {
        this.src = src;
        this.dest = dest;
        this.weight = weight;
    }

    // Compare edges based on their weight for priority queue ordering
    public int compareTo(Edge compareEdge) {
        return this.weight - compareEdge.weight;
    }
}

// Class to represent the graph
class Graph {
    private int V; // Number of vertices
    private LinkedList<Edge>[] adj; // Adjacency list

    // Constructor
    Graph(int V) {
        this.V = V;
        adj = new LinkedList[V];
        for (int i = 0; i < V; ++i)
            adj[i] = new LinkedList<>();
    }

    // Function to add an edge to the graph
    void addEdge(int src, int dest, int weight) {
        Edge edge1 = new Edge(src, dest, weight);
        Edge edge2 = new Edge(dest, src, weight);
        adj[src].add(edge1);
        adj[dest].add(edge2); // Because the graph is undirected
    }

    // Function to perform Prim's algorithm and find the MST
    void primMST() {
        boolean[] inMST = new boolean[V]; // To track vertices included in MST
        PriorityQueue<Edge> pq = new PriorityQueue<>(); // Min-Heap to get minimum weight edge
        LinkedList<Edge> result = new LinkedList<>(); // To store the resulting MST

        // Start from the first vertex (arbitrary choice)
        int start = 0;
        inMST[start] = true;

        // Add all edges from the start vertex to the priority queue
        for (Edge edge : adj[start])
            pq.add(edge);

        while (!pq.isEmpty()) {
            // Get the smallest edge from the priority queue
            Edge minEdge = pq.poll();

            // Get the destination vertex of the smallest edge
            int dest = minEdge.dest;

            // If the destination vertex is already in the MST, skip it
            if (inMST[dest])
                continue;

            // Include the edge in the MST
            result.add(minEdge);
            inMST[dest] = true;

            // Add all edges from the new vertex to the priority queue
            for (Edge edge : adj[dest])
                if (!inMST[edge.dest])
                    pq.add(edge);
        }

        // Print the resulting MST
        printMST(result);
    }

    // Function to print the MST
    void printMST(LinkedList<Edge> mst) {
        System.out.println("Minimum Spanning Tree:");
        for (Edge edge : mst)
            System.out.println(edge.src + " - " + edge.dest + " : " + edge.weight);
    }
}

class PrimsAlgorithm {
    public static void main(String[] args) {
        int V = 5;
        Graph graph = new Graph(V);

        graph.addEdge(0, 1, 2);
        graph.addEdge(0, 3, 6);
        graph.addEdge(1, 2, 3);
        graph.addEdge(1, 3, 8);
        graph.addEdge(1, 4, 5);
        graph.addEdge(2, 4, 7);
        graph.addEdge(3, 4, 9);

        graph.primMST();
    }
}

...................................................................................................................