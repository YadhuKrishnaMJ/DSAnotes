Arrays

-> Collections of Primitive Datatypes

-> Can only have one type of primitive variable

syntax:
    datatype[] variable name = new datatype[size];

example:

int[] rnos = new int[5];
//or
int[] rnos = {23,12,45,32,15};

Declaration and Initialization:

int[] rnos; // Declaration: object defined in stack (compile time)
rnos = new int[5]; // Initialization: object created in heap memory (Runtime)

................................................................................
  
-> Dynamic Memory Allocation -> Memory allocated during Runtime

-> In c/c++ , they use continous memory Allocation

-> In Java:
    Array objects are in heap
    Heap Objects are not continous (runtime data area)
    Dynamic Memory Allocation
    Array objects in JAVA , May not be continous, depends on JVM

-> Array:
    index: Used to access array elements

-> new keyword - is used to create an object in heap memory

-> Integer array are initialized with all values zeroes
-> String array are initialized with all values null

-> null is a literal, null can only be assigned to non primitives
................................................................................... 

-> primitives -> Stack memory
-> objects -> Heap memory 
....................................................................................


Array creation Example:

public class input {
    public static void main(String[] args) {
        int [] arr = new int[5];
        arr[0] = 23;
        arr[1] =45;
        arr[2] = 56;
        arr[3] = 543;
        arr[4] = 3;
        System.out.println(arr[3]);

    }
}
...................................................................................
Using For loop

import java.util.Scanner;

public class input {
    public static void main(String[] args) {
        Scanner  in = new Scanner(System.in);
        int[] arr = new int[5];
        for (int i = 0; i < arr.length ; i++) {
            arr[i] = in.nextInt();
        }

        for (int i = 0; i < arr.length ; i++) {
            System.out.print(arr[i]+" ");
        }
    }
}

....................................................................
Using Enhanced For loop

for( int num : arr){
    System.out.println(num +" "); // num represents element of array
}
....................................................................

-> Index out of bound error -> access index out of array

....................................................................
using arrays class

System.out.println(Arrays.toString(arr));

.....................................................................

Array of Objects

String

Code:

import java.util.Arrays;
import java.util.Scanner;

public class input {
    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        String[] str = new String[4];
        for (int i = 0; i < str.length; i++) {
            str[i] = in.next();

        }
        System.out.println(Arrays.toString(str));
    }
}

.....................................................................

->  Each array of object has array of reference variables pointing to the object

..............................................................................

You can change value 
str[1] = "kunal";

.........................................................................................
Array values can be changed via a Function , Mutable

import java.util.Arrays;

public class PassingInFunction {
    public static void main(String[] args) {
        int[] nums = {3,6,8,3,8,3};
        System.out.println(Arrays.toString(nums));
        change(nums);
        System.out.println(Arrays.toString(nums));
    }

    static void change(int[] arr){
        arr[0]=99;
    }
}

........................................................................

2D Arrays in Java

-> Adding of number of columns is not necessary

int[][] arr = new int[3][];

int[][] arr = new int[3][3];

-> In Java unlike C++ continous memory Allocation, isnt continous

-> Array of Arrays -> Stored in heap

-> No of columns can be ommitted -> because inner array can be of variable lemgth

...........................................................................................

-> arr.length for a 2d matrix gives no. of rows 

-> first for loop interates rows  and inner forloop iterates columns

-> arr[row].length can be used to iterate columns


Code:

import java.util.Scanner;

public class multiArray {
    public static void main(String[] args) {
        /*
        1 2 3
        4 5 6
        7 8 9
         */

        int [][] arr = new int [3][3];
        Scanner in = new Scanner(System.in);

        for(int row = 0; row < arr.length; row++) {
           // for each col in every row
            for (int col = 0; col < arr[row].length; col++) {
                arr[row][col] = in.nextInt();
            } 
        }

        for(int row = 0; row < arr.length; row++) {
            // for each col in every row
            for (int col = 0; col < arr[row].length; col++) {
                System.out.print(arr[row][col] + " ");
            }
            System.out.println();
        }

        System.out.println();

    }

}

.....................................................................................................

Another Way to print 2D arrays:

for(int row = 0; row < arr.length; row++) {
    // for each col in every row
    System.out.println(Arrays.toString(arr[row]));
    System.out.println();
}

......................................................................................................
Even Better: (Enhanced For)

for(int[] a: arr){
    System.out.println(Arrays.toString(a));
}
......................................................................................................
For Printing Variable Array columns in 2D Arrays


public class ColNoFixed {
    public static void main(String[] args) {
        int[][] arr ={
                {1,2,3,4},
                {5,6},
                {7,8,9}
        };

        for (int row = 0; row < arr.length; row++) {
            for (int col = 0; col < arr[row].length; col++) {
                System.out.print(arr[row][col] + " ");
            }
            System.out.println();

        }
    }
}

........................................................................................................

Array List (Similar to C++ vectors)

-> Dynamic Arrays

Initialization:
ArrayList<Integer> List = new ArrayList<>(10);

-> we can only pass Wrapper Classes not primitives


Basic Operations:

import javax.swing.*;
import java.util.ArrayList;
import java.util.Scanner;

public class ArrayListExample {
    public static void main(String[] args) {
        ArrayList<Integer> List = new ArrayList<>(5);
        Scanner in = new Scanner(System.in);

        //add
        List.add(67);
        List.add(45);
        List.add(56);
        List.add(675);
        List.add(647);

        //Check
        System.out.println(List.contains(456));

        //update
        List.set(0,99);

        //remove
        List.remove(2);



        System.out.println(List);


        ArrayList<Integer> List2 = new ArrayList<>(4);
        //input
        for (int i = 0; i < 5; i++) {
            List2.add(in.nextInt());
        }

        //Get
        for (int i = 0; i < List2.size(); i++) {
            System.out.println(List2.get(i));
        }

    }
}
.............................................................................

-> ArrayList Size is actually Fixed Internally 
-> It basically creates a array list of , double the size and 
    old elements are added and old list is deleted
-> Basically dynamically Creates bigger ArrayLists with O(1) complexity
.............................................................................
Nested ArrayList:

Initialization:

ArrayList<ArrayList<Integer>> list = new ArrayList<>();
for (int i = 0; i < 3; i++) {
    list.add(new ArrayList<>());
}

..............................................................................
Code for 2D Array list


import java.util.ArrayList;
import java.util.Scanner;

public class MultiAL {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        ArrayList<ArrayList<Integer>> list = new ArrayList<>();
        for (int i = 0; i < 3; i++) {
            list.add(new ArrayList<>());
        }

        // get 2D list
        for (int i = 0; i < 3 ; i++) {
            for (int j = 0; j < 3 ; j++) {
                list.get(i).add(in.nextInt());
            }
            
        }
        System.out.println(list);
    }
}

..................................................................................


Swap program for Swapping two Numbers in an array

import java.util.Arrays;

public class Swap {
    public static void main(String[] args) {
        int[] arr = {1,3,23,9,18};
        swap(arr,1,3);
        System.out.println(Arrays.toString(arr));
    }

    static void swap(int[] arr, int index1, int index2) {
        int temp = arr[index1];
        arr[index1]= arr[index2];
        arr[index1] = temp;
    }
}
....................................................................................

Program to find max from an Array

public class Max {
    public static void main(String[] args) {
        int[] arr = {1,3,23,9,18};
        System.out.println(max(arr));
        System.out.println(maxRange(arr, 1,3));
    }

    static int max(int[] arr) {
        int maxVal = arr[0];
        for (int i = 0; i < arr.length; i++) {
            if(arr[i]>maxVal){
                maxVal = arr[i];
            }
        }
        return maxVal;
    }

    static int maxRange(int[] arr, int start, int end) {
        int maxVal = arr[start];
        for (int i = start; i < end; i++) {
            if(arr[i]>maxVal){
                maxVal = arr[i];
            }
        }
        return maxVal;
    }
}
......................................................................................

Reverse an Array

import java.util.Arrays;

public class Max {
    public static void main(String[] args) {
        int[] arr = {1,3,23,9,18};
        reverse(arr);
        System.out.println(Arrays.toString(arr));
    }

    static void swap(int[] arr, int index1, int index2) {
        int temp = arr[index1];
        arr[index1]= arr[index2];
        arr[index2] = temp;
    }

    static void reverse(int[] arr){
          int start = 0;
          int end = arr.length-1;

          while(start<end){
              swap(arr,start,end);
              start++;
              end--;
          }
    }
}
...................................................................................



