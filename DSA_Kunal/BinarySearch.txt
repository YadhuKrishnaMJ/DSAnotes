Binary Search

-> Search space gets divided by 2 every iteration

Algorithmn 

-> Find the Middle Element
-> Target > mid -> Search in the right else search in left
-> If middle element == target element -> answer

.............................................................................

Why binary search?

-> Best Scenario - Constant O(1)
-> Worst Case - log N 

-> search space decreases by half -> N , N/2, N/4 .... 1
-> N / 2^k

-> Total comparisons in worst case = log N

...............................................................................

-> mid = start + end / 2 might exceed limit of integer in java


-> so we use 
    mid = start + (end-start)/2

.................................................................................

Code 


public class BinarySearch
{
    public static void main(String[] args) {
        int[] arr = {-18,-12,-4,5,6,8,10,45,89,100};
        int target = 0;
        int ans = binarySearch(arr, target);
        System.out.println(ans);
    }

    // return the index
    // return -1 id does  not exist
    static int binarySearch(int[] arr, int target){
        int start = 0;
        int end = arr.length - 1;
        while(start <= end){
            // find the middle element
//            int mid = (start + end) / 2; // might exceed java limit range of integer

            int mid = start + (end - start)/2;

            if(target < arr[mid]){
                end = mid - 1;
            }
            else if ( target > arr[mid]){
                start = mid + 1;
            }
            else{
                //ans found
                return mid;
            }

        }
        return -1;
    }

}
....................................................................................
Order Agnostic Binary Search

-> what is the elements are sorted in descending order? then we use this binary search in reverse fucking order
-> we compare first and last to check if ascending or descending
-> we use isAsc boolean to determine if ascending or descending
.....................................................................................
Code


public class orderagnosticBS {
    public static void main(String[] args) {
        //int[] arr = {-18,-12,-4,5,6,8,10,45,89,100};
        int[] arr = { 99,88,45,35,23,1,-4,-8};
        int target =23;
        int ans = orderAgnosticBS(arr, target);
        System.out.println(ans);
    }

    static int orderAgnosticBS(int[] arr, int target){
        int start = 0;
        int end = arr.length - 1;

        // find whether ascending or descending

        boolean isAsc = arr[start] < arr[end];


        while(start <= end){
            // find the middle element
//            int mid = (start + end) / 2; // might exceed java limit range of integer

            int mid = start + (end - start)/2;

            if(arr[mid] == target ){
                return  mid;
            }

            if(isAsc){
                if(target < arr[mid]){
                    end = mid - 1;
                }
                else {
                    start = mid + 1;
                }
            }
            else{
                if(target > arr[mid]){
                    end = mid - 1;
                }
                else {
                    start = mid + 1;
                }
            }

        }
        return -1;
    }
}

.....................................................................................................................




