Functions/Methods

-> Functions are a block of Code
-> Code Reusability

DRY -> Dont repeat yourself Format

Syntax

AccessModifier Return_type name(){
    body;
    return statement;
}

Example:
static void sum(){
    Scanner in = new Scanner(System.in);
    int num1,num2,sum;
    System.out.println("Enter Number 1:");
    num1= in.nextInt();
    System.out.println("enter number 2:");
    num2 = in.nextInt();
    sum = num1+num2;
    System.out.println("The Sum is:"+sum);
}

Function calling -> sum();

...............................................
Return types

-> void = for no return
-> int = return int types
etc

example:

static int sum(){
        Scanner in = new Scanner(System.in);
        int num1,num2,sum;
        System.out.println("Enter Number 1:");
        num1= in.nextInt();
        System.out.println("enter number 2:");
        num2 = in.nextInt();
        sum = num1+num2;
        return sum;
    }

calling:
    ans = sum();    

-> return statement ends the Function, after it any statement
will not execute.

..........................................................

Arguments

Example:

    public static void main(String[] args) {
        System.out.println(sum(20,50));
    }
    static int sum(int a , int b){
        Scanner in = new Scanner(System.in);
        int sum = a+b;
        return sum;
    }

.......................................................

Another Example:

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        System.out.print("Enter your Name:");
        String name = in.next();

        String message = myGreet(name);
        System.out.println(message);
    }


    static String myGreet(String name) {
        String Message = "Hello "+name;
        return Message;
    }

....................................................................

-> when a variable is passed to a method -> Value is passed
-> in java there is only pass by Value
-> No Pass by reference in java
-> You can access variables declared in function within function only(Scoping)
........................................................................

-> for primitives -> pass by Value

-> Objects and References -> Pass by value (to the referenc evariable)

.........................................................................

Code to Change array value

public class ChangeValue {
    public static void main(String[] args) {
        // create an array
        int[] arr = {1,3,2,45,6};
        change(arr);
        System.out.println(Arrays.toString(arr));
    }

    static void change(int [] nums){
        nums[0] =99;
    }
}

-> Still pass by value of reference to the object , thus changing the object
-> by reference variable we change the object (Array)
..............................................................................................

Scope 
-> function scope : only can be accessed within a function

-> block scope : values init in the block can only be accessed in the block
                 can change outside block scope values
                 block init variables cannot be accessed outside the code

-> For loop scope: init 'i' can only be accessed within the forloop
                   forloop init variables cannot be accessed outside the code

........................................................................................

Shadowing

-> Higher level variables gets overrided by lower level variable (Shadowed)

-> Scope begins when the variable is initialized

public class Shadowing {
    static int x=90;// class variable
    public static void main(String[] args) {
        System.out.println(x); // 90
        int x; // declaring
        x = 40;// initializing
        System.out.println(x); // 40
        fun();
    }
    static void fun(){
        System.out.println(x);
    }
}
....................................................................
Variable Length Arguments

-> when we dont know how many inputs we are giving 
-> takes array of types

Example:

import java.util.Arrays;

public class VLargs {
    public static void main(String[] args) {
        fun(2,3,4,5,6,7,34,55,6,66);
    }

    static void fun(int ...v){
        System.out.println(Arrays.toString(v));
    }
}
.........................................................................

-> variable length arguments cannot be added in between other arguments
-> must be the last

static void multiple(int a, int b , String...v){
            
}

..................................................................................
Function Overloading

-> 2 or more functions can exist with the same name if args are different

public class Overloading {
    public static void main(String[] args) {
        fun(56);
        fun("yadhu");
    }

    static void fun(int a){
        System.out.println(a);
    }

    static void fun(String name){
        System.out.println(name);
    }
}

......................................................................
Ambiguity Error
-> While function Overloading, cannot have ambuity else Error
................................................................................

Q) Armstrong numbers

    cube every digit and add it

Code:

import java.util.Scanner;

public class Questions {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
//        int n = in.nextInt();
        for(int i = 100; i< 1000; i++){
            if(isArmstrong(i)){
                System.out.println(i+":is Armstrong");
            }
        }
    }
    // Print all 3 digit armstrong numbers
    static boolean isArmstrong(int n){
        int original = n;
        int sum = 0;
        while(n>0){
            int rem = n%10;
            n = n/10;
            sum = sum + rem * rem * rem;
        }
        return sum == original;
    }



}
..............................................................................................












