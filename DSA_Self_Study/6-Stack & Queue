Stack works on the principle of LIFO
-> Last in first out (LIFO)
-> Uses just one Pointer

Basic Stack Operations:

  Push 
  pop
  isEmpty
  isFull
  Peek

Real Life Implementation:
  Undo Operations in applications

...................................................................
Stack Implementation using Array

// Stack implementation in Java

class Stack {
  private int arr[];
  private int top;
  private int capacity;

  // Creating a stack
  Stack(int size) {
    arr = new int[size];
    capacity = size;
    top = -1;
  }

  // Add elements into stack
  public void push(int x) {
    if (isFull()) {
      System.out.println("OverFlow\nProgram Terminated\n");
      System.exit(1);
    }

    System.out.println("Inserting " + x);
    arr[++top] = x;
  }

  // Remove element from stack
  public int pop() {
    if (isEmpty()) {
      System.out.println("STACK EMPTY");
      System.exit(1);
    }
    return arr[top--];
  }

  // Utility function to return the size of the stack
  public int size() {
    return top + 1;
  }

  // Check if the stack is empty
  public Boolean isEmpty() {
    return top == -1;
  }

  // Check if the stack is full
  public Boolean isFull() {
    return top == capacity - 1;
  }

  public void printStack() {
    for (int i = 0; i <= top; i++) {
      System.out.println(arr[i]);
    }
  }

  public static void main(String[] args) {
    Stack stack = new Stack(5);

    stack.push(1);
    stack.push(2);
    stack.push(3);
    stack.push(4);

    stack.pop();
    System.out.println("\nAfter popping out");

    stack.printStack();

  }
}
.................................................................................

Using Java Stack Util


import java.util.Stack;

public class StackExample {
    public static void main(String[] args) {
        // Creating a stack
        Stack<Integer> stack = new Stack<>();

        // Pushing elements onto the stack
        stack.push(10);
        stack.push(20);
        stack.push(30);

        // Popping elements from the stack
        int poppedElement = stack.pop();
        System.out.println("Popped element: " + poppedElement); // Output: 30

        // Peeking the top element of the stack
        int topElement = stack.peek();
        System.out.println("Top element: " + topElement); // Output: 20

        // Checking if the stack is empty
        boolean isEmpty = stack.isEmpty();
        System.out.println("Is stack empty? " + isEmpty); // Output: false

        // Getting the size of the stack
        int size = stack.size();
        System.out.println("Size of stack: " + size); // Output: 2
    }
}
.....................................................................................
......................................................................................

Queue Data Structure:
  FIFO (First in First Out)
  Uses Two pointers

  Operations:
    Enqueue
    Dequeue
    Peek
    isFull
    isEmpty

  Example:
    Counter Queue in movie
    Sending Documents to a printer

......................................................................................
import java.util.*;

public class QueueOperations {
    public static void main(String[] args) {
        Queue<String> queue = new LinkedList<>();

        // Adding elements
        queue.add("Element 1");
        queue.offer("Element 2");

        // Removing elements
        String removedElement = queue.remove();
        System.out.println("Removed element: " + removedElement);

        // Examining the head of the queue
        String headElement = queue.peek();
        System.out.println("Head element: " + headElement);

        // Iterating through the queue
        System.out.println("Elements in queue:");
        for (String element : queue) {
            System.out.println(element);
        }

        // Checking size and emptiness
        int size = queue.size();
        boolean isEmpty = queue.isEmpty();
        System.out.println("Queue size: " + size);
        System.out.println("Is queue empty? " + isEmpty);
    }
}

.....................................................................................
Types of Queue:
    Simple Queue:
      FIFO 

    Circular Queue:
      Connects first and the last node
..............................................................
    Priority Queue:
      Collection of Queues 
      Queue for each Priority value
      Queue with highest Priority is processed first

      Code:

import java.util.PriorityQueue;
import java.util.Comparator;

public class PriorityQueueExample {
    public static void main(String[] args) {
        // Natural ordering (min-heap)
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();

        // Custom comparator (max-heap)
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Comparator.reverseOrder());

        // Adding elements
        minHeap.add(5);
        minHeap.add(1);
        minHeap.add(3);

        maxHeap.add(5);
        maxHeap.add(1);
        maxHeap.add(3);

        // Removing and printing elements
        System.out.println("Min-Heap:");
        while (!minHeap.isEmpty()) {
            System.out.println(minHeap.remove());
        }

        System.out.println("Max-Heap:");
        while (!maxHeap.isEmpty()) {
            System.out.println(maxHeap.remove());
        }

        // Creating a priority queue with a custom comparator (string length)
        PriorityQueue<String> pq = new PriorityQueue<>((s1, s2) -> s2.length() - s1.length());

        pq.add("apple");
        pq.add("banana");
        pq.add("cherry");

        System.out.println("Custom Comparator (String length):");
        while (!pq.isEmpty()) {
            System.out.println(pq.poll());
        }
    }
}
.....................................................................................................


    Doubly Ended Queue:
      Add and Remove elements from both sides
      
      Code:
      import java.util.ArrayDeque;
      import java.util.Deque;
      import java.util.Iterator;
      
      public class DequeExample {
          public static void main(String[] args) {
              Deque<Integer> deque = new ArrayDeque<>();
      
              // Adding elements
              deque.addFirst(1);
              deque.addLast(2);
              deque.offerFirst(0);
              deque.offerLast(3);
      
              System.out.println("Deque after adding elements: " + deque);
      
              // Removing elements
              int first = deque.removeFirst();
              int last = deque.removeLast();
      
              System.out.println("Removed first: " + first + ", Removed last: " + last);
              System.out.println("Deque after removing elements: " + deque);
      
              // Examining elements
              int peekedFirst = deque.peekFirst();
              int peekedLast = deque.peekLast();
      
              System.out.println("Peeked first: " + peekedFirst + ", Peeked last: " + peekedLast);
      
              // Iterating through the deque
              System.out.println("Iterating through the deque:");
              for (int element : deque) {
                  System.out.println(element);
              }
      
              // Iterating through the deque in reverse order
              System.out.println("Iterating through the deque in reverse order:");
              Iterator<Integer> descendingIterator = deque.descendingIterator();
              while (descendingIterator.hasNext()) {
                  System.out.println(descendingIterator.next());
              }
          }
      }
...............................................................................................................