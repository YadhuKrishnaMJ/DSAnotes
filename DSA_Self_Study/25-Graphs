Collection of Nodes and Edges
.................................
Graph Types:
    Directed (Digraph)
    Undirected
.................................
Representations:
    Adjacency Matrix
    Adjacency List
.................................

Basic Graph Code:


import java.util.*;

class Main{
    public static void main(String[] args) {
        Graph graph = new Graph(5);
        graph.addEdge(0, 1);
        graph.addEdge(0, 4);
        graph.addEdge(1, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 3);
        graph.addEdge(3, 4);

        graph.printGraph();
    }
}

class Graph{
    //No of Vertices in the Graph
    int vertices;

    //Adjacency List as A LinkedList
    LinkedList<Integer>[] AdjacencyList;

    Graph(int v){
        //Constructor
        vertices = v;
        //Create a new Array of linked List
        AdjacencyList = new LinkedList[v];
        //Store null LinkedList<>() values for each Array index
        for( int i = 0; i < v ; i++){
            AdjacencyList[i] = new LinkedList<>();
        }
    }

    public void addEdge(int source , int destination){
        //For Undirected Graph we do vice versa
        AdjacencyList[source].add(destination);
        AdjacencyList[destination].add(source);
    }

    public void printGraph() {
        for (int i = 0; i < vertices; i++) {
            System.out.println();
            System.out.print("Vertex " + i );
            for (Integer vertex : AdjacencyList[i]) {
                System.out.print("->" + vertex);
            }
        }
    }
}

.......................................................